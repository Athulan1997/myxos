alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
// Get system call no. from the stack and put it in a register
alias cPID S5;
cPID = (PTBR - 1024)/8;
alias cPCB S6;
cPCB = READY_LIST + (cPID * 8);
alias counter S7;
alias sysCallNo S1;
sysCallNo = [physicalSP - 1];
alias FATIndex S4;
// Get arguments from stack and put it in registers
alias arg1 S2;
arg1 = [physicalSP - 4];
alias arg2 S3;
arg2 = [physicalSP - 3];
alias BBIndex S8;
alias SWOFTIndex S9;
if ( sysCallNo == 5) then
	if(arg1 >= 0 && arg1 < 8) then
                counter = arg1 * 2;
                if([cPCB + counter  + 15] != -1) then
                        SWOFTIndex = [cPCB + counter  + 15] * 2;
			FATIndex = [FILE_TABLE + SWOFTIndex] * 8;
			load(1,[FAT + FATIndex + 2]);
			BBIndex = [FILE_TABLE + SWOFTIndex + 1] / 512;
			if([512 + BBIndex] == -1) then
				counter = 24;
				while([DISK_LIST + counter] != 0 && counter != 448) do
					counter = counter + 1;
				endwhile;
				if(counter != 448) then
					[DISK_LIST + counter] = 1;	
					[FAT + FATIndex + 1] = [FAT + FATIndex + 1] + 1;
					[512 + 	BBIndex] = counter;
					store(1,[FAT + FATIndex + 2]);
					store(5,19);
					store(6,20);
				endif;
			endif;
			if([512 + BBIndex] != -1) then
				load(1,[512 + BBIndex]);
				[512 + ([FILE_TABLE + SWOFTIndex + 1] % 512)] = arg2;
				store(1,[512 + BBIndex]);
				[FILE_TABLE + SWOFTIndex + 1] = [FILE_TABLE + SWOFTIndex + 1] + 1;
				[physicalSP - 2] = 0;
				ireturn;
			endif;
                endif;
                                
        endif;
	[physicalSP - 2] = -1;
	ireturn;
endif;

